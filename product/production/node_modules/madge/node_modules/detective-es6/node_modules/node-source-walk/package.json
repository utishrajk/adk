{
  "_args": [
    [
      {
        "raw": "node-source-walk@https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.0.0.tgz",
        "scope": null,
        "escapedName": "node-source-walk",
        "name": "node-source-walk",
        "rawSpec": "https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.0.0.tgz",
        "spec": "https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.0.0.tgz",
        "type": "remote"
      },
      "/root/Projects/vistacore/adk/product/production/node_modules/madge"
    ]
  ],
  "_from": "node-source-walk@>=3.0.0 <4.0.0",
  "_id": "node-source-walk@3.0.0",
  "_inCache": true,
  "_location": "/madge/detective-es6/node-source-walk",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-source-walk@https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.0.0.tgz",
    "scope": null,
    "escapedName": "node-source-walk",
    "name": "node-source-walk",
    "rawSpec": "https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.0.0.tgz",
    "spec": "https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/madge/detective-es6"
  ],
  "_resolved": "https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.0.0.tgz",
  "_shasum": "e9001c455553aeb7596595000e124e6395bb300a",
  "_shrinkwrap": null,
  "_spec": "node-source-walk@https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.0.0.tgz",
  "_where": "/root/Projects/vistacore/adk/product/production/node_modules/madge",
  "author": {
    "name": "Joel Kemp",
    "email": "joel@mrjoelkemp.com",
    "url": "http://www.mrjoelkemp.com/"
  },
  "bugs": {
    "url": "https://github.com/mrjoelkemp/node-source-walk/issues"
  },
  "dependencies": {
    "babylon": "~6.8.1",
    "object-assign": "^4.0.1"
  },
  "description": "Execute a callback on every node of a source code's AST and stop walking when you see fit",
  "devDependencies": {
    "jscs": "~2.4.0",
    "mocha": "~2.0.1",
    "sinon": "~1.12.2"
  },
  "homepage": "https://github.com/mrjoelkemp/node-source-walk",
  "keywords": [
    "ast",
    "traversal",
    "acorn",
    "static analysis",
    "source code",
    "walker",
    "jsx"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "node-source-walk",
  "optionalDependencies": {},
  "readme": "### node-source-walk [![npm](http://img.shields.io/npm/v/node-source-walk.svg)](https://npmjs.org/package/node-source-walk) [![npm](http://img.shields.io/npm/dm/node-source-walk.svg)](https://npmjs.org/package/node-source-walk)\n\n> Execute a callback on every node of a file's AST and stop walking whenever you see fit.\n\n*A variation of [substack/node-detective](https://github.com/substack/node-detective)\nand simplification of [substack/node-falafel](https://github.com/substack/node-falafel).*\n\n`npm install node-source-walk`\n\n### Usage\n\n```javascript\n  var Walker = require('node-source-walk');\n\n  var walker = new Walker();\n\n  // Assume src is the string contents of myfile.js\n  // or the AST of an outside parse of myfile.js\n\n  walker.walk(src, function (node) {\n    if (/* some condition */) {\n      // No need to keep traversing since we found what we wanted\n      walker.stopWalking();\n    }\n  });\n\n```\n\nBy default, Walker will use `babylon` (supporting ES6, JSX, Flow, and all other available babylon plugins) and the `sourceType: module`, but you can change any of the defaults as follows:\n\n```js\nvar walker = new Walker({\n  sourceType: 'script',\n  // If you don't like experimental plugins\n  plugins: [\n    'jsx',\n    'flow'\n  ]\n});\n```\n\n* The supplied options are passed through to the parser, so you can configure it according to babylon's documentation: https://github.com/babel/babylon\n\n### Public Members\n\n`walk(src, cb)`\n\n* src: the contents of a file **OR** its (already parsed) AST\n* cb: a function that is called for every visited node\n\n`stopWalking()`\n\n* Halts further walking of the AST until another manual call of `walk`.\n* This is super-beneficial when dealing with large source files\n\n`traverse(node, cb)`\n\n* Allows you to traverse an AST node and execute a callback on it\n* Callback should expect the first argument to be an AST node, similar to `walk`'s callback.\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mrjoelkemp/node-source-walk.git"
  },
  "scripts": {
    "test": "jscs -p google index.js test && mocha test/test.js"
  },
  "version": "3.0.0"
}
